# PACKAGES
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from imblearn.under_sampling import RandomUnderSampler
import tensorflow as tf
from tensorflow.keras.layers import BatchNormalization
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Reshape, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from numpy.random import seed

# IMPORT DATA
df=pd.read_csv('bs140513_032310.csv')
df=df.drop(['zipMerchant', 'zipcodeOri'], axis=1)

# DATA PRE-PROCESSING
# Converting categorical variables into numerical
col_categorical = df.select_dtypes(include= ['object']).columns
for col in col_categorical:
    df[col] = df[col].astype('category')
df[col_categorical] = df[col_categorical].apply(lambda x: x.cat.codes)

# SET SEED FOR NUMPY AND TENSORFLOW
seed(1)
tf.random.set_seed(2)

# INDEPENDENT AND RESPONSE VARIABLE
X=df.drop('fraud', axis=1) # Independent (We drop the fraud column)
y=df['fraud'] # Response (fraud column)

# SPLIT THE DATA IN TRAIN AND TEST
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)

# WE DEFINE THE NETWORK AS A SEQUENCE MODEL
fraud_nn=Sequential()

fraud_nn.add(Dense(10,activation='relu', input_dim=X_train.shape[1]))
fraud_nn.add(Reshape((10,)))
fraud_nn.add(BatchNormalization(momentum=0.8))
fraud_nn.add(Dropout(0.5))

fraud_nn.add(Dense(15, activation='relu'))
fraud_nn.add(BatchNormalization(momentum=0.8))
fraud_nn.add(Dropout(0.5))

fraud_nn.add(Dense(20, activation='relu'))
fraud_nn.add(BatchNormalization(momentum=0.8))
fraud_nn.add(Dropout(0.5))

fraud_nn.add(Dense(20, activation='relu'))
fraud_nn.add(BatchNormalization(momentum=0.8))
fraud_nn.add(Dropout(0.5))

fraud_nn.add(Dense(15, activation='relu'))
fraud_nn.add(BatchNormalization(momentum=0.8))
fraud_nn.add(Dropout(0.5))

fraud_nn.add(Dense(10, activation='relu'))
fraud_nn.add(BatchNormalization(momentum=0.8))
fraud_nn.add(Dropout(0.5))

fraud_nn.add(Dense(1,activation='sigmoid')) # Last layer referring to the class (0 o 1)

fraud_nn.summary() # Network structure

# UNDERSAMPLING
rus=RandomUnderSampler(random_state=42)
X_train, y_train=rus.fit_resample(X_train, y_train)

# COST FUNCTION OPTIMIZER
optimizer = Adam(0.01,0.9)

# MODEL COMPILATION
fraud_nn.compile(loss='binary_crossentropy',

                 optimizer=optimizer,

                 metrics=['accuracy',tf.keras.metrics.Precision(),tf.keras.metrics.Recall(),tf.keras.metrics.AUC(curve='PR')])
                 
# MODEL TRAINING
fraud_nn.fit(X_train, y_train, batch_size=128, epochs=50)

# PREDICT THE DATA IN THE TEST
fraud_nn.evaluate(X_test,y_test)

